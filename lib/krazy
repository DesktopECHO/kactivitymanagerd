
krazy2 Analysis

Checkers Run = 33
Files Processed = 13
Total Issues = 10 ...as of May 28 2012 13:00:41 CEST

== c++: For File Type c++ ==
1. Check for TRUE and FALSE macros [captruefalse]... Ok!

2. Check for methods that return 'const' refs in public classes [constref]... Ok!

3. Check for an acceptable copyright [copyright]... Ok!

4. Check for cpp macros and usage [cpp]... Ok!

5. Check for code that should be considered crashy. [crashy]... Ok!

6. Check single-char QString operations for efficiency [doublequote_chars]... Ok!

7. Check for unwanted doxygen tags in major versions [doxytags]... Ok!

8. Check public classes with private members or d-pointer issues [dpointer]... Ok!

9. Check for QString compares to "" [emptystrcompare]... Ok!

10. Check that file ends with a newline [endswithnewline]... Ok!

11. Check for C++ ctors that should be declared 'explicit' [explicit]... 1 issue found
	./resourceinstance.h: line#84 (1)
	Make all C++ class constructors that can be used with only one
	required argument 'explicit' to minimize wrong use of the class. Do
	this to avoid mistaken implicit constructor ambiguities. Copy
	constructors should not be explicit.

12. Check for foreach loop issues [foreach]... Ok!

13. Check validity of i18n calls [i18ncheckarg]... Ok!

14. Check for invalid icon names [iconnames]... Ok!

15. Check for proper include directives [includes]... 9 issues found
	./controller.h: using leading or trailing underscores on include guard in header
	./manager_p.h: using leading or trailing underscores on include guard in header
	./consumer_p.h: using leading or trailing underscores on include guard in header
	./resourceinstance.h: using leading or trailing underscores on include guard in header
	./info.h: using leading or trailing underscores on include guard in header
	./consumer.h: using leading or trailing underscores on include guard in header
	./info_p.h: using leading or trailing underscores on include guard in header
	./info.cpp: include own header first line#21
	./info.cpp: include own _p header second line#22
	Use <..> to include installed headers; <QtModule/QClass> to include
	Qt headers from installed headers; cpp file should include their
	own headers first (but below config.h); other rules apply, see
	<http://techbase.kde.org/Policies/Library_Code_Policy#Getting_.23in
	cludes_right>. Use include guards in headers with appropriatedly
	encoded macro names.

16. Check for inline methods in public classes [inline]... Ok!

17. Check for an acceptable license [license]... Ok!

18. Check for assignments to QString::null [nullstrassign]... Ok!

19. Check for compares to QString::null or QString() [nullstrcompare]... Ok!

20. Check for C++ operators that should be 'const' [operators]... Ok!

21. Check for inappropriate pass-by-value function args [passbyvalue]... Ok!

22. Check for postfix usage of ++ and -- [postfixop]... Ok!

23. Check for dangerous or inefficient QByteArray usage [qbytearray]... Ok!

24. Check for Qt classes that should not be used [qclasses]... Ok!

25. Check for Qt methods that should be avoided [qmethods]... Ok!

26. Check for QMIN and QMAX macros [qminmax]... Ok!

27. Check for classes that should use the 'Q_OBJECT' macro [qobject]... Ok!

28. Check for signals: and slots: [sigsandslots]... Ok!

29. Check for spelling errors [spelling]... Ok!

30. Check for improperly initialized global static objects [staticobjects]... Ok!

31. Check for strings used improperly or should be i18n. [strings]... Ok!

32. Check for system calls to replace by KDE or Qt equivalents [syscalls]... Ok!

33. Check for typedefs that should be replaced by Qt typedefs [typedefs]... Ok!

