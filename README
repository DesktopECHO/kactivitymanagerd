-------------------------------------------------------------------------------
For developers working on kactivities:

Commit policy:

  Every non-trivial patch must go through the review before it goes into the
  master branch.

  http://git.reviewboard.kde.org
      repository: kactivities
      groups:     plasma
      people:     Ivan Cukic

  If you don't have an account for identity.kde.org, you can send smaller
  patches to the plasma-devel@kde.org mailing list, or (please don't) directly
  to the repository maintainer (see MAINTAINER file).

Code policy:

  The code needs to follow KDElibs coding style in *all* parts of the project,
  not only the library. You can find more information about the style here:
  http://techbase.kde.org/Policies/Kdelibs_Coding_Style

Compiler compatibility:

  The library (src/lib) needs to be compilable with all compilers that the
  latest version of Qt (4.x) supports.

  Other parts require modern compilers. You can (and should) use more modern
  C++ coding practices. Including auto, lambdas, smart pointers etc. You can
  use anything that GCC 4.5 can compile.

  These are the compilers you need to test your patches against:
   - GCC 4.5
   - GCC 4.7
   - LLVM/Clang 3.1
  When you set up different builds alongside the main one, you  can use
  scripts/commit.sh to build them all before committing. The script
  calls git commit if all builds finished successfully. See the script
  for more info.


Convenience macros and methods:

  There are some convenience macros and methods defined in the headers placed
  in the service/utils/ direftory.

  - nullptr.h defines nullptr macro if the compiler doesn't support it. It is
  defined as 0 which is far from perfect, but works good enough on obsolete
  compilers.

  - override.h defines _override to express explicit virtual overrides. Will
  expand to nothing on obsolete compilers.

  - val.h defines a macro 'val' that expands to 'const auto'. People tend not
  to use the const keyword even when they are defining a variable that will
  not change. This way, it is easier to do so. For example, instead of writing
  this:
      const QString path = KStandardDirs::locateLocal("data", ...);
      const int id = object->id();
  you can (and should) write this:
      val path = KStandardDirs::locateLocal("data", ...);
      val id   = object->id();

  - d_ptr.h and d_ptr_implementation.h define a smart pointer way of doing
  the d-ptr (aka pimpl) idiom.

  - remove_if.h is a generic implementation of the erase-remove idiom

  - for_each_assoc.h and find_if_assoc.h define the for_each and find_if
  algorithms for associative containers. Works with both Qt and STL containers.

-------------------------------------------------------------------------------
For users and packagers

Library

  The library can be used even if the service is not running nor installed.
  The dependencies are minimal since it is only a thin wrapper for the d-bus
  service.

Service

  - Activity encryption

  For the encryption to work, FUSE needs to be properly set up and encfs
  installed. If the locations of fusermount and encfs are not standard
  (/bin/fusermount and /usr/bin/encfs) you can set the custom ones by
  supplying cmake with a few additional parameters:
    -DFUSERMOUNT_PATH="/path/to/fusermount"
    -DENCFS_PATH="/path/to/encfs"

