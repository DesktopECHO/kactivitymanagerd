
libKActivities
==============
src/lib/core/controller.cpp:41:
 TODO: Make Q_ASSERT_EVENTUALLY_X or something similar

src/lib/core/info.cpp:165:
 TODO: This needs to be changed, test for the new linking feature

src/lib/core/resourceinstance.cpp:147:
 TODO: update the service info
src/lib/core/resourceinstance.cpp:159:
 TODO: update the service info


libKActivitiesStats
===================
src/lib/stats/resultset.cpp:171:
 TODO: Implement types
 QStringList types() const;
src/lib/stats/resultset.cpp:232:
 TODO: We need to correct the scores based on the time that passed
       since the cache was last updated, although, for this query,
       scores are not that important.
src/lib/stats/resultset.cpp:307:
 TODO: We need to correct the scores based on the time that passed
       since the cache was last updated
src/lib/stats/resultset.cpp:376:
 TODO: Get this to work

src/lib/stats/resultwatcher.h:91:
 TODO: Move these to libKActivities

src/lib/stats/resultmodel.cpp:144:
 TODO: We should also sort by the resource, not only on a single field
src/lib/stats/resultmodel.cpp:237:
 TODO: This can add or remove items from the model
src/lib/stats/resultmodel.cpp:253:
 TODO: Make this a little bit smarter
       - there is a possibility that the new list of
       items will not differ significantly to the old one
       in which case it does not need to be a full model reset

src/lib/stats/resultwatcher.cpp:170:
 TODO: See whether it makes sense to have lastUpdate/firstUpdate here as well


KActivityManagerD
=================
src/service/ksmserver/KSMServer.cpp:72:
 TODO: in multi-head environment there are multiple kwin instances
 running and they will export different dbus name on different
 root window. We have no support for that currently.
 In future, the session management for Wayland may also need to be
 reimplemented in some way.

src/service/plugins/sqlite/StatsPlugin.cpp:117:
 TODO: Event cleanup should be also done from time to time,
       not only on startup
src/service/plugins/sqlite/StatsPlugin.cpp:408:
 TODO: Add focus and modification
src/service/plugins/sqlite/StatsPlugin.cpp:545:
 TODO: Check against sql injection

src/service/Application.cpp:155:
 TODO: Restart on crash
       KCrash::setFlags(KCrash::AutoRestart);
src/service/Application.cpp:197:
 TODO: Show a notification for a plugin that failed to load


QML imports
===========
src/imports/resourcemodel.cpp:104:
 NOTE: What to do if the file does not exist?
       Ignoring that case since the daemon creates it on startup.
       Is it plausible that somebody will instantiate the ResourceModel
       before the daemon is started?
src/imports/resourcemodel.cpp:134:
 TODO: Database connection naming could be smarter (thread-id-based,
       reusing connections...?)
src/imports/resourcemodel.cpp:336:
 TODO: Will probably need some more special handling -
       for application:/ and a few more
src/imports/resourcemodel.cpp:552:
 TODO: This might be smarter possibly, but might collide
       with the SQL model. Implement a custom model with internal
       cache instead of basing it on QSqlModel.


Workspace plugins
=================

Other
=====
src/common/database/schema/ResourcesDatabaseSchema.cpp:109:
 TODO: This will require some refactoring after we introduce more databases

